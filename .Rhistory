1 + 2 - 3 +
# - R is 'case sensitve'
sum(1,2)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
source("packages.r")
pwd
cd
source("functions.r")
getwd()
library(haven)
library(readr)
readr_example("mtcars.csv")
mtcars <- read_csv(readr_example("mtcars.csv"))
mtcars
str(mtcars)
write_csv(mtcars, "data/spreadsheets/mtcars-comma.csv")
mtcars <- read_csv2("data/spreadsheets/mtcars-semicolon.csv")
install.packages("magrittr")
install.packages("magrittr")
browseURL("http://www.transtats.bts.gov/DatabaseInfo.asp?DB_ID=120&Link=0")
dat <- flights %>% as.data.frame
head(dat)
browseURL("http://www.transtats.bts.gov/DatabaseInfo.asp?DB_ID=120&Link=0")
dat <- flights %>% as.data.frame
head(dat)
# ************************************************
### simon munzert
### introduction to R
# ************************************************
source("packages.r")
source("functions.r")
# ************************************************
# WHAT'S R? --------------------------------------
# - software environment for numeric and visual data analysis
# - statistical programming language based on S
# - open source
# - works on all main platforms (Windows, OSX, Linux)
# - under continuous development
# - masses of addons ('packages') available, ~1-3 new ones every day (currently more than 10000 on CRAN)
# ************************************************
# WORKING WITH RSTUDIO ---------------------------
### a first view
# - point-and-click menu
# - many windows, many buttons
### console input
# - R is ready when the console offers '>'
# - input is incomplete if R answers with '+' (you are likely to have forgotten a ')' or ']')
1 + 2 - 3 +
# - R is 'case sensitve'
sum(1,2)
Sum(1,2)
# the assignment operator '<-' stores something in the workspace. You can call this something again later. We can also  use '=' instead, but it is less common among R users and I do not recommend it
x <- log(10)
x
# R uses English vocabulary, therefore we have to follow the English default in using commas and dots:
3.1415
3,1415
# commas are very important when it comes to matrices and data frames: they separate row from column values
mat <- matrix(c("this", "is", "a", "matrix"), nrow = 2, byrow = TRUE)
mat[1,2]
mat[1,]
mat[,1]
# - we use # to comment in the code
# - the RStudio editor provides auto completion (use 'TAB')
# - very useful: recycle previous commands by using the arrow keys (up/down) in the console
# - CTRL/cmd+up provides a list of previous commands
#
# list of helpful shortcuts:
#
# CTRL+1         point cursor in editor
# CTRL+2         point cursor in console
# ESC            interrupt R
# CTRL+F         search and replace
# CTRL+SHIFT+C   comment code (and undo commenting)
# CTRL/cmd+ENTER     execute code
# CTRL+S         save document
# ************************************************
# IMPORTING PACKAGES -----------------------------
# in contrast to Stata, base R has a rather limited functionality
# when we start R, we usually have to load a bunch of packages for our analysis
# overview of packages:
browseURL("http://cran.r-project.org/web/packages/")
# packages are installed once (usually after downloading them from CRAN)
# installing packages in RStudio is straightforward
# updating packages is straightforward, too
# we can also use the console to install packages
install.packages("dplyr")
# packages are loaded for every session
library(dplyr)
# ************************************************
# IMPORTING AND EXPORTING DATA -------------------------
# importing rectangular spreadsheet data
library(readr)
dir.create("data/spreadsheets")
readr_example("mtcars.csv")
# import and export comma-delimited files
mtcars <- read_csv(readr_example("mtcars.csv"))
head(mtcars)
write_csv(mtcars, "data/spreadsheets/mtcars-comma.csv")
# import and export semi-colon delimited files (Germans!)
write_delim(mtcars, delim = ";", path = "data/spreadsheets/mtcars-semicolon.csv")
mtcars <- read_csv2("data/spreadsheets/mtcars-semicolon.csv")
head(mtcars)
## FOR R NERDS
# why readr, not base R?
# readr is much faster (up to 10x)
# strings remain strings by default
# automatically parse common date/time formats
# progress bar if needed
# importing Stata files
library(haven)
dir.create("data/stata")
write_dta(mtcars, "data/stata/mtcars.dta")
mtcars_stata <- read_dta("data/stata/mtcars.dta")
## FOR R NERDS
# why not use functions from foreign package?
# haven works with binary files from newer Stata versions, too
# retains value/variable labels
# ************************************************
# PIPING -----------------------------------------
# what is piping?
# structures sequences of data operations as "pipes, i.e. left-to-right (as opposed to from the inside and out)
# serves the natural way of reading ("do this, then this, then this, ...")
# avoids nested function calls
# improves "cognitive performance" of code writers and readers
# minimizes the need for local variables and function definitions
# why name "magrittr"?
browseURL("https://upload.wikimedia.org/wikipedia/en/b/b9/MagrittePipe.jpg")
# traditional way of writing code
dat <- babynames
dim(dat)
dat_filtered <- filter(dat, name == "Kim")
dat_grouped <- group_by(dat_filtered, year, sex)
dat_sum <- summarize(dat_grouped, total = sum(n))
qplot(year, total, color = sex, data = dat_sum, geom = "line") +
ggtitle('People named "Kim"')
# traditional, even more awkward way of writing code
dat <- summarize(group_by(filter(babynames, name == "Kim"), year, sex), total = sum(n))
qplot(year, total, color = sex, data = dat, geom = "line") +  ggtitle('People named "Kim"')
# magrittr style of piping code
babynames %>%
filter(name %>% equals("Kim")) %>%
group_by(year, sex) %>%
summarize(total = sum(n)) %>%
qplot(year, total, color = sex, data = ., geom = "line") %>%
add(ggtitle('People named "Kim"')) %>%
print
install.packages("dplyr")
# ************************************************
### simon munzert
### introduction to R
# ************************************************
source("packages.r")
source("functions.r")
# ************************************************
# WHAT'S R? --------------------------------------
# - software environment for numeric and visual data analysis
# - statistical programming language based on S
# - open source
# - works on all main platforms (Windows, OSX, Linux)
# - under continuous development
# - masses of addons ('packages') available, ~1-3 new ones every day (currently more than 10000 on CRAN)
# ************************************************
# WORKING WITH RSTUDIO ---------------------------
### a first view
# - point-and-click menu
# - many windows, many buttons
### console input
# - R is ready when the console offers '>'
# - input is incomplete if R answers with '+' (you are likely to have forgotten a ')' or ']')
1 + 2 - 3 +
# - R is 'case sensitve'
sum(1,2)
Sum(1,2)
# the assignment operator '<-' stores something in the workspace. You can call this something again later. We can also  use '=' instead, but it is less common among R users and I do not recommend it
x <- log(10)
x
# R uses English vocabulary, therefore we have to follow the English default in using commas and dots:
3.1415
3,1415
# commas are very important when it comes to matrices and data frames: they separate row from column values
mat <- matrix(c("this", "is", "a", "matrix"), nrow = 2, byrow = TRUE)
mat[1,2]
mat[1,]
mat[,1]
# - we use # to comment in the code
# - the RStudio editor provides auto completion (use 'TAB')
# - very useful: recycle previous commands by using the arrow keys (up/down) in the console
# - CTRL/cmd+up provides a list of previous commands
#
# list of helpful shortcuts:
#
# CTRL+1         point cursor in editor
# CTRL+2         point cursor in console
# ESC            interrupt R
# CTRL+F         search and replace
# CTRL+SHIFT+C   comment code (and undo commenting)
# CTRL/cmd+ENTER     execute code
# CTRL+S         save document
# ************************************************
# IMPORTING PACKAGES -----------------------------
# in contrast to Stata, base R has a rather limited functionality
# when we start R, we usually have to load a bunch of packages for our analysis
# overview of packages:
browseURL("http://cran.r-project.org/web/packages/")
# packages are installed once (usually after downloading them from CRAN)
# installing packages in RStudio is straightforward
# updating packages is straightforward, too
# we can also use the console to install packages
install.packages("dplyr")
# packages are loaded for every session
library(dplyr)
# ************************************************
# IMPORTING AND EXPORTING DATA -------------------------
# importing rectangular spreadsheet data
library(readr)
dir.create("data/spreadsheets")
readr_example("mtcars.csv")
# import and export comma-delimited files
mtcars <- read_csv(readr_example("mtcars.csv"))
head(mtcars)
write_csv(mtcars, "data/spreadsheets/mtcars-comma.csv")
# import and export semi-colon delimited files (Germans!)
write_delim(mtcars, delim = ";", path = "data/spreadsheets/mtcars-semicolon.csv")
mtcars <- read_csv2("data/spreadsheets/mtcars-semicolon.csv")
head(mtcars)
## FOR R NERDS
# why readr, not base R?
# readr is much faster (up to 10x)
# strings remain strings by default
# automatically parse common date/time formats
# progress bar if needed
# importing Stata files
library(haven)
dir.create("data/stata")
write_dta(mtcars, "data/stata/mtcars.dta")
mtcars_stata <- read_dta("data/stata/mtcars.dta")
## FOR R NERDS
# why not use functions from foreign package?
# haven works with binary files from newer Stata versions, too
# retains value/variable labels
# ************************************************
# PIPING -----------------------------------------
# what is piping?
# structures sequences of data operations as "pipes, i.e. left-to-right (as opposed to from the inside and out)
# serves the natural way of reading ("do this, then this, then this, ...")
# avoids nested function calls
# improves "cognitive performance" of code writers and readers
# minimizes the need for local variables and function definitions
# why name "magrittr"?
browseURL("https://upload.wikimedia.org/wikipedia/en/b/b9/MagrittePipe.jpg")
# traditional way of writing code
dat <- babynames
dim(dat)
dat_filtered <- filter(dat, name == "Kim")
dat_grouped <- group_by(dat_filtered, year, sex)
dat_sum <- summarize(dat_grouped, total = sum(n))
qplot(year, total, color = sex, data = dat_sum, geom = "line") +
ggtitle('People named "Kim"')
# traditional, even more awkward way of writing code
dat <- summarize(group_by(filter(babynames, name == "Kim"), year, sex), total = sum(n))
install.packages("dplyr")
babynames %>%
filter(name %>% equals("Kim")) %>%
group_by(year, sex) %>%
summarize(total = sum(n)) %>%
qplot(year, total, color = sex, data = ., geom = "line") %>%
add(ggtitle('People named "Kim"')) %>%
print
# syntax and vocabulary
# by default, the left-hand side (LHS) will be piped in as the first argument of the function appearing on the right-hand side (RHS)
# %>% may be used in a nested fashion, e.g. it may appear in expressions within arguments. This is used in the mpg to kpl conversion
# when the LHS is needed at a position other than the first, one can use the dot,'.', as placeholder
# whenever only one argument is needed--the LHS--, the parentheses can be omitted
# ************************************************
# MANIPULATING DATA FRAMES -----------------------
# dplyr, by Hadley Wickham, provides a flexible grammar of data manipulation
# three main goals
# identify the most important data manipulation verbs and make them easy to use from R
# provide fast performance for in-memory data
# use the same interface to work with data no matter where it's stored, whether in a data frame, data table or database.
# get data from nycflights13 package
# source: [https://goo.gl/8hlrJb]
# info about the dataset:
browseURL("http://www.transtats.bts.gov/DatabaseInfo.asp?DB_ID=120&Link=0")
dat <- flights %>% as.data.frame
head(dat)
library(magrittr)
browseURL("http://www.transtats.bts.gov/DatabaseInfo.asp?DB_ID=120&Link=0")
dat <- flights %>% as.data.frame
head(dat)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
dat <- flights %>% as.data.frame
library("nycflights13", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
dat <- flights %>% as.data.frame
head(dat)
library(nycflights13)
names(flights)
dim(flights)
sapply(flights, class)
dim(flights)
?class
str(flights)
table(flight$origin)
table(flights$origin)
selected_flights <- select(flights, day=1)
selected_flights
selected_flights <- filter(flights, day=1)
selected_flights <- filter(flights, day==1)
filter(flights, day==1)
