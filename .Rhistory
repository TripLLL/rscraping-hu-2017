readr_example("mtcars.csv")
# import and export comma-delimited files
mtcars <- read_csv(readr_example("mtcars.csv"))
head(mtcars)
write_csv(mtcars, "data/spreadsheets/mtcars-comma.csv")
# import and export semi-colon delimited files (Germans!)
write_delim(mtcars, delim = ";", path = "data/spreadsheets/mtcars-semicolon.csv")
mtcars <- read_csv2("data/spreadsheets/mtcars-semicolon.csv")
head(mtcars)
## FOR R NERDS
# why readr, not base R?
# readr is much faster (up to 10x)
# strings remain strings by default
# automatically parse common date/time formats
# progress bar if needed
# importing Stata files
library(haven)
dir.create("data/stata")
write_dta(mtcars, "data/stata/mtcars.dta")
mtcars_stata <- read_dta("data/stata/mtcars.dta")
## FOR R NERDS
# why not use functions from foreign package?
# haven works with binary files from newer Stata versions, too
# retains value/variable labels
# ************************************************
# PIPING -----------------------------------------
# what is piping?
# structures sequences of data operations as "pipes, i.e. left-to-right (as opposed to from the inside and out)
# serves the natural way of reading ("do this, then this, then this, ...")
# avoids nested function calls
# improves "cognitive performance" of code writers and readers
# minimizes the need for local variables and function definitions
# why name "magrittr"?
browseURL("https://upload.wikimedia.org/wikipedia/en/b/b9/MagrittePipe.jpg")
# traditional way of writing code
dat <- babynames
dim(dat)
dat_filtered <- filter(dat, name == "Kim")
dat_grouped <- group_by(dat_filtered, year, sex)
dat_sum <- summarize(dat_grouped, total = sum(n))
qplot(year, total, color = sex, data = dat_sum, geom = "line") +
ggtitle('People named "Kim"')
# traditional, even more awkward way of writing code
dat <- summarize(group_by(filter(babynames, name == "Kim"), year, sex), total = sum(n))
install.packages("dplyr")
babynames %>%
filter(name %>% equals("Kim")) %>%
group_by(year, sex) %>%
summarize(total = sum(n)) %>%
qplot(year, total, color = sex, data = ., geom = "line") %>%
add(ggtitle('People named "Kim"')) %>%
print
# syntax and vocabulary
# by default, the left-hand side (LHS) will be piped in as the first argument of the function appearing on the right-hand side (RHS)
# %>% may be used in a nested fashion, e.g. it may appear in expressions within arguments. This is used in the mpg to kpl conversion
# when the LHS is needed at a position other than the first, one can use the dot,'.', as placeholder
# whenever only one argument is needed--the LHS--, the parentheses can be omitted
# ************************************************
# MANIPULATING DATA FRAMES -----------------------
# dplyr, by Hadley Wickham, provides a flexible grammar of data manipulation
# three main goals
# identify the most important data manipulation verbs and make them easy to use from R
# provide fast performance for in-memory data
# use the same interface to work with data no matter where it's stored, whether in a data frame, data table or database.
# get data from nycflights13 package
# source: [https://goo.gl/8hlrJb]
# info about the dataset:
browseURL("http://www.transtats.bts.gov/DatabaseInfo.asp?DB_ID=120&Link=0")
dat <- flights %>% as.data.frame
head(dat)
library(magrittr)
browseURL("http://www.transtats.bts.gov/DatabaseInfo.asp?DB_ID=120&Link=0")
dat <- flights %>% as.data.frame
head(dat)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
dat <- flights %>% as.data.frame
library("nycflights13", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
dat <- flights %>% as.data.frame
head(dat)
library(nycflights13)
names(flights)
dim(flights)
sapply(flights, class)
dim(flights)
?class
str(flights)
table(flight$origin)
table(flights$origin)
selected_flights <- select(flights, day=1)
selected_flights
selected_flights <- filter(flights, day=1)
selected_flights <- filter(flights, day==1)
filter(flights, day==1)
=======
source("packages.r")
source("functions.r")
dat <- flights %>% as.data.frame
head(dat)
destinations <- group_by(dat, dest)
summarize(destinations, planes = n_distinct(tailnum))
summarize_each(destinations, funs(mean))
head(destinations)
table(dat$dest)
destinations <- group_by(dat, dest)
summarize_each(dat, funs(mean))
summarize_each(dat, funs(mean, median))
?summarize_each
summarize_each_(dat, funs(mean), distance, air_time)
summarize_each_(dat, funs(mean), vars = c(distance, air_time))
summarize_each_(dat, funs(mean), vars = c("distance", "air_time"))
summarize_each_(dat, funs(mean, na.rm = TRUE), vars = c("distance", "air_time"))
summarize_each_(dat, funs(mean), vars = c("distance", "air_time"), na.rm = TRUE)
summarize_each_(dat, funs(mean), vars = c("distance", "air_time"))
dat
head(dat)
summarize_each_(dat, funs(mean), vars = c("distance", "arr_delay"))
summarize_each_(dat, funs_(mean, na.rm = T), vars = c("distance", "arr_delay"))
summarize_each_(dat, funs_(mean, list(na.rm = T)), vars = c("distance", "arr_delay"))
summarize_each_(dat, funs_(list(mean), list(na.rm = T)), vars = c("distance", "arr_delay"))
summarize_each_(dat, funs(m1 = mean(., na.rm = TRUE)), vars = c("distance", "arr_delay"))
summarize_each_(dat, funs(mean = mean(., na.rm = TRUE)), vars = c("distance", "arr_delay"))
<<<<<<< HEAD
>>>>>>> simonmunzert/master
=======
x <- c(4,8,15,16,23,42)
x
mode(x)
length(x)
summary(x)
countries <- c("Germany", "France", "Netherlands", "Belgium")
countries
paste("Hello", "world!", sep = " ")
paste("Hello", "world!", sep = ", ")
paste0("Hello", "world!")
paste("Hello", "world!")
c(countries, "Poland")
mode(countries)
length(countries)
summary(countries)
countries
x
x > 15
x == sqrt(225)
(x > 8 & x < 23)
(x > 8 | x < 23)
y <- c(1,10,NA,7,NA,11)
sum(y)
sum(y, na.rm = TRUE)
y
y == NA
is.na(y)
!is.na(y)
!is.na(y)
y*3
?rep
?seq
seq(1, 10, 2)
seq_along(x)
y
countries
seq_along(countries)
rep(c(1, 2, 3), 2)
rep(c(1, 2, 3), 3)
?rep
rep(c(1, 2, 3), times = 3)
rep(c(1, 2, 3), each = 2)
rep(c(1, 2, 3), each = 2)
vec1 <- c(2, 20, -5, 1, 200)
vec1
vec2 <- seq(1, 5)
vec2
vec2 <- seq(1, 5, 1.5)
vec2
sort(vec1)
sort(vec1, decreasing = FALSE)
sort(vec1, decreasing = TRUE)
order(vec1, decreasing = FALSE)
vec1
order(vec2)
order(vec2)
vec2 <- seq(1, 5)
order(vec2)
order(vec1)
vec1[order(vec1)]
sort(vec1)
vec1[order(vec1)]
vec3 <- c(1,10,NA,7,NA,11)
vec3
vec4 <- vec3[!is.na(vec3)]
vec4
z <- c(1,2,"Bavaria", 4)
z
str(z)
zz <- c(1,2,Bavaria,4,5,6) # error
Bavaria <- 3
zz <- c(1,2,Bavaria,4,5,6)
zz
str(zz)
zz
zzchar <- as.character(zz)
zzchar
zznum <- as.numeric(zzchar)
zznum
zzchar <- "Bavaria"
zzchar
zzchar <- as.character(zz)
zzchar[3] <- "Bavaria"
zzchar
zznum <- as.numeric(zzchar)
zznum
zzchar[2] <- "Berlin"
zzchar
as.numeric(zzchar)
x
zz
xzz <- c(x,zz)
xzz
countries
countries[2]
xzz
xzz[1:6] # xzz[seq(1,6)], xzz[c(1,2,3,4,5,6)]
xzz[c(2, 5, 10)]
xzz[-1]
xzz -1
xzz[-(1, 3)]
xzz[-c(1, 3)]
Hessen
xzz[Hessen]
Hessen <- 4
xzz[Hessen]
seq(0, 10, by = 2)
xzz[seq(0, 10, by = 2)]
xzz[c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE)]
y
y[is.na(y)]
y[!is.na(y)]
y
y[y>5 | !is.na(y)]
y[y>5 | is.na(y)]
countries
countries[3] <- "Switzerland"
countries
xzz
xzz[c(1, 3, 5)] <- c(100,110,120)
xzz
xzz_new <- xzz
xzz_new
xzz_new[xzz > 100] <- 1
xzz_new
xzz_new[xzz <= 100] <- 0
xzz_new
x <- seq(0, 20, 4)
x
y <- c(3,3,3,4,4,4,4,5,5,5,5,5)
y
rep(c(3, 4, 5), each = 3)
rep(c(3, 4, 5), c(3, 4, 5))
x
y
z <- c(x[1:5], y[2:12])
z
seq(1, 100) %>% sum()
library(magrittr)
seq(1, 100) %>% sum()
sum(1:100)
101*50
seq(1, 100, 2)
seq(1, 100, 2)^2
seq(1, 100, 2)^2 %>% sum
foo_df <- as.data.frame(matrix(ncol = 6))
foo_df
names(foo_df)
names(foo_df) <- c("hIgHlo", "REPEAT VALUE", "REPEAT VALUE", "% successful (2009)",  "abc@!*", "")
foo_df
janitor::clean_names(foo_df)
make.names(names(foo_df)) # base R solution - not very convincing
c(1:5, 98, 99)
sample(c(1:5, 98, 99))
sample(c(1:5, 98, 99))
sample(c(1:5, 98, 99))
sample(c(1:5, 98, 99), 20, replace = TRUE)
sample(c(1:5, 98, 99), 20, replace = TRUE)
sample(c(1:5, 98, 99), 20, replace = TRUE)
convert_to_NA(sample(c(1:5, 98, 99), 20, replace = TRUE), c(98,99))
source("packages.r")
source("functions.r")
?convert_to_NA
convert_to_NA(sample(c(1:5, 98, 99), 20, replace = TRUE), c(98,99))
foo <- sample(c(1:5, 98, 99), 20, replace = TRUE)
foo
foo[foo == 98 | foo == 99] <- NA
foo
head(mtcars)
table(mtcars$cyl)
janitor::tabyl(mtcars$cyl, show_na = TRUE, sort = TRUE)
janitor::tabyl(mtcars$cyl, show_na = TRUE, sort = TRUE) %>% add_totals_row()
mtcars %$% table(cyl, gear)
mtcars %>% janitor::crosstab(cyl, gear)
mtcars %>% janitor::crosstab(cyl, gear) %>% adorn_crosstab(denom = "row", show_totals = TRUE)
mtcars %>% janitor::crosstab(cyl, gear) %>% adorn_crosstab(denom = "row") %>% add_totals_row()
crosstab(cyl, gear) %>% adorn_crosstab(denom = "row")
mtcars %>% janitor::crosstab(cyl, gear) %>% adorn_crosstab(denom = "row")
mtcars
sum_vector <- vector()
sum_vector
sum_vector <- numeric()
sum_vector
sum_vector <- numeric()
for(i in 1:4) {
sum_vector[i] <- mtcars[,i] %>% sum
}
sum_vector
mtcars[,1]
names(mtcars)
sum_vector <- numeric()
for(i in 1:11) {
sum_vector[i] <- mtcars[,i] %>% sum
}
sum_vector
sum_vector <- numeric()
for(i in 1:12) {
sum_vector[i] <- mtcars[,i] %>% sum
}
sum_vector
str(mtcars)
length(mtcars)
seq_along(mtcars)
ncol(mtcars)
nrow(mtcars)
sum_vector <- numeric()
for(i in 1:ncol(mtcars)) {
sum_vector[i] <- mtcars[,i] %>% sum
}
sum_vector
lapply(mtcars, is.numeric)
sum_vector <- logical()
for(i in 1:ncol(mtcars)) {
sum_vector[i] <- mtcars[,i] %>% is.numeric
}
sum_vector
foo <- lapply(mtcars, is.numeric)
foo
class(foo)
sapply(mtcars, is.numeric)
foo <- sapply(mtcars, is.numeric)
class(foo)
sapply(mtcars, is.numeric) %>% class
a <- matrix(1:20, nrow = 5)
a
apply(a, 1, mean)
apply(a, 2, mean)
apply(mtcars, 2, mean)
apply(mtcars, 1, mean)
names(mtcars)
apply(mtcars[,1:2], 1, mean)
mtcars[,1:2] %>% apply(1, mean)
apply(mtcars[,1:2], 1, mean)
names(mtcars)
apply(mtcars[,c("gear", "carb")], 1, mean)
select(mtcars, gear, carb)
select(mtcars, gear, carb) %>% apply(1, mean)
?runif
?rnorm
runif(10)
runif(10)
runif(10)
runif(10)
runif(10)
runif(10)
xs <- replicate(5, runif(10), simplify = FALSE)
xs
ws <- replicate(5, rpois(10, 5) + 1, simplify = FALSE)
ws
?weighted.mean
Map(weighted.mean, xs, ws)
Map(weighted.mean, xs, ws) %>% unlist
mtcars
mtcars$mpg
mtcars$mpg %>% class
(current_folder <- getwd())
setwd("/Users/munzerts/github/")
setwd("/Users/munzerts/github/rscraping-hu-2017")
dir.create("data")
dir.create("data/r-data")
# get all pre-compiled data sets
dat <- as.data.frame(data(package = "datasets")$results)
dat$Item %<>% str_replace(" \\(.+\\)", "")
dat
# store data sets in local folder
for (i in 1:50) {
try(df_out <- dat$Item[i] %>% as.character %>% get)
save(df_out, file = paste0("data/r-data/", dat$Item[i], ".RData"))
}
dir()
dir("data/r-data")
filenames <- dir("data/r-data", full.names = TRUE)
filenames
dir("data/r-data", pattern = "US")
dir("data/r-data", pattern = "US", ignore.case = TRUE)
?files
filenames
basename(filenames)
url <- "http://www.mzes.uni-mannheim.de/d7/en/news/media-coverage/ist-die-wahlforschung-in-der-krise-der-undurchschaubare-buerger"
url
basename(url)
dirname(url)
file_inf <- file.info(dir(recursive = F))
file_inf
tools::file_ext(filenames)
filenames
tools::file_ext(dir())
file.exists(filenames)
file.exists("voterfile.RData")
file.exists(filenames)
file.exists()
(foo <- file.choose())
<<<<<<< HEAD
>>>>>>> simonmunzert/master
source("packages.r")
source("functions.r")
url <- "http://www.cses.org/datacenter/module4/module4.htm"
library(xml2)
library(rvest)
page_links <- read_html(url) %>% html_nodes("a") %>% html_attr("href")
survey_pdfs <- str_subset(page_links, "/survey")
dir.create("data/cses-pdfs")
out <- getwd()
baseurl <- "http://www.cses.org"
survey_pdfs
out <- paste0(getwd(), /)
out <- paste0(getwd(), "/")
out
dir.create("data/cses-pdfs", recursive = TRUE)
out <- paste0(getwd(), "/")
out
dir.create("data/cses-pdfs", recursive = TRUE)
out <- "data/cses-pdfs/"
library(rvest)
page_links <- read_html(url) %>% html_nodes("a") %>% html_attr("href")
survey_pdfs <- str_subset(page_links, "/survey")
# set up folder data/cses-pdfs.
dir.create("data/cses-pdfs", recursive = TRUE)
# download a sample of 10 of the survey questionnaire PDFs into that folder using a for loop and the download.file() function.
baseurl <- "http://www.cses.org"
for (i in 1:10) {
filename <- basename(survey_pdfs[i])
if(!file.exists(paste0("data/cses-pdfs/", filename))){
download.file(paste0(baseurl, survey_pdfs[i]), destfile = paste0("data/cses-pdfs/", filename))
Sys.sleep(runif(1, 0, 1))
}
}
length(list.files(out))
list.files(out)
file_info <- file.info(out)
file_info$size
file_info
file_info <- file.info(dir(out))
file_info
file_info$size
file_info <- file.info(dir(out), full.names== TRUE)
file_info <- file.info(dir(out), full.names= TRUE)
file_info$size
file_info <- file.info(dir("data/cses-pdfs/"), full.names= TRUE)
file_info$size
file_info <- file.info(dir("data/cses-pdfs/"), full.names= TRUE) %>% View
zip("./data/cses-pdfs/zip_cses.pdfs.zip", dir("data/cses-pdfs/", full.names = T))
url <- url("https://books.google.de/books?id=-fgYAAAAQBAJ&printsec=frontcover&dq=argumentationsmuster+deliberation&hl=en&sa=X&redir_esc=y#v=onepage&q=argumentationsmuster%20deliberation&f=false")
info.url(url)
file_info(url)
file.info(url)
dirname(url)
url <- url("https://books.google.de/books?id=-fgYAAAAQBAJ&printsec=frontcover&dq=argumentationsmuster+deliberation&hl=en&sa=X&redir_esc=y#v=onepage&q=argumentationsmuster%20deliberation&f=false")
url <- "https://books.google.de/books?id=-fgYAAAAQBAJ&printsec=frontcover&dq=argumentationsmuster+deliberation&hl=en&sa=X&redir_esc=y#v=onepage&q=argumentationsmuster%20deliberation&f=false"
file.info(url)
dirname(url)
file_inf <- file.info(dir(recursive = F))
file_inf
example.obj <- "1. A small sentence. - 2. Another tiny sentence."
example.obj <- "1. A small sentence. - 2. Another tiny sentence."
str_extract(example.obj, "small")
str_extract(example.obj, "banana")
?grep()
str_extract_all(example.obj, "sentence")
unlist(str_extract_all(example.obj, "sentence"))
grep("small", example.obj)
grep("small", example.obj, text)
unlist(str_extract_all(example.obj, "sentence", value= T))
unlist(str_extract_all(example.obj, "sentence", value= TRUE))
grep("small", example.obj, text, value= TRUE)
str_extract(example.obj, "sentence")
out <- str_extract_all(c("text", "manipulation", "basics"), "a")
out
str_extract(example.obj, ignore.case("SMALL"))
=======
source("packages.r")
library(stringr)
string1 <- "This is a string"
string1 %>% class()
double_quote <- "\"" # or '"'
double_quote
?"'"
double_quote
writeLines(double_quote) # shows raw contents of the string
cat(double_quote)
x <- "\u00b5"
x
writeLines(x)
x
double_quote
x <- c("apple", "banana", "pear")
x
?str_view
str_view(x, "an")
str_view_all(x, "an")
str_view_all(x, "a")
raw.data <- "555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert"
raw.data
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
phone <- unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
phone
str_extract_all(raw.data, "[[:alpha:]., ]{2,}")
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
example.obj <- "1. A small sentence. - 2. Another tiny sentence."
example.obj
str_extract(example.obj, "small")
str_extract(example.obj, "banana")
(out <- str_extract_all(c("text", "manipulation", "basics"), "a"))
c("text", "manipulation", "basics"), "a"
c("text", "manipulation", "basics")
(out <- str_extract_all(c("text", "manipulation", "basics"), "a"))
str_extract(example.obj, "small")
str_extract(example.obj, "SMALL")
str_extract(example.obj, ignore.case("SMALL")) # wrong
str_extract(example.obj, regex("SMALL", ignore_case = TRUE))
example.obj
str_extract(example.obj, "mall sent")
str_extract(example.obj, "^1")
>>>>>>> simonmunzert/master
str_extract(example.obj, "^2")
str_extract(example.obj, "sentence$")
str_extract(example.obj, "sentence.$")
unlist(str_extract_all(example.obj, "tiny|sentence"))
str_extract(example.obj, "sm.ll")
<<<<<<< HEAD
str_extract(example.obj, "sm[abs]ll")
str_extract(example.obj, "sm[abs]ll")
str_extract(example.obj, "sm[a-p]")
[:digit:]   # digits 0-9
t <-      [:digit:]   # digits 0-9
str_extract_all(example.obj, [[:punct]])
str_extract_all(example.obj, [[:punct:]])
str_extract_all(example.obj, "[[:punct:]]")
str_extract_all("François Hollande", "Fran[:alpha:]oise") # returns NA
str_extract_all("François Hollande", "Fran[[:alpha:]]oise") # returns NA
str_extract_all("François Hollande", "Fran[[:alpha:]]ois") # returns NA
str_extract_all(example.obj, "[[:punct:]ABC]")
str_extract_all(example.obj, "[^[:alnum:]]")
str_extract(example.obj, "s[[:alnum:]][[:alnum:]][[:alnum:]]l")
str_extract(example.obj, "s...l")
=======
str_extract(example.obj, "sm[abc]ll")
str_extract(example.obj, "sm[a-p]ll")
unlist(str_extract_all(example.obj, "[uvw. ]"))
example.obj
unlist(str_extract_all(example.obj, "[:punct:]"))
?base::regex
unlist(str_extract_all(example.obj, "[[:punct:]ABC]"))
unlist(str_extract_all(example.obj, "[^[:alnum:]]"))
str_extract(example.obj, "s[[:alpha:]][[:alpha:]][[:alpha:]]l")
str_extract(example.obj, "s[[:alpha:]]{3}l")
str_extract(example.obj, "A.+sentence")
str_extract(example.obj, "A.+?sentence")
unlist(str_extract_all(example.obj, "(.en){1,5}"))
unlist(str_extract_all(example.obj, ".en{1,5}"))
unlist(str_extract_all(example.obj, "(.en){1,4}"))
unlist(str_extract_all(example.obj, "(.en){1,3}"))
unlist(str_extract_all(example.obj, "(.en)"))
unlist(str_extract_all(example.obj, "(.en){1,1}"))
unlist(str_extract_all(example.obj, "(.en){1,5}"))
unlist(str_extract_all(example.obj, "(.en){2,5}"))
unlist(str_extract_all(example.obj, "(.en){1,5}"))
unlist(str_extract_all(example.obj, "(.en){1,6}"))
unlist(str_extract_all(example.obj, "(.en){1,7}"))
unlist(str_extract_all(example.obj, "(.en){1,3}"))
example.obj
unlist(str_extract_all(example.obj, "\\."))
unlist(str_extract_all(example.obj, fixed(".")))
unlist(str_extract_all(example.obj, fixed("sentence.")))
unlist(str_extract_all(example.obj, "[12-]"))
unlist(str_extract_all(example.obj, "[1-2]"))
example.obj
str_extract(example.obj, "([[:alpha:]]).+?\\1")
str_extract(example.obj, "(\\b[a-z]+\\b).+?\\1")
unlist(str_extract_all(example.obj, "(?<=2. ).+")) # positive lookbehind: (?<=...)
unlist(str_extract_all(example.obj, ".+(?=2)")) # positive lookahead (?=...)
unlist(str_extract_all(example.obj, "(?<!Blah )tiny.+")) # negative lookbehind: (?<!...)
unlist(str_extract_all(example.obj, "sentence.+(?!Bla)")) # negative lookahead (?!...)
browseURL("http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address/201378#201378") # think again
<<<<<<< HEAD
>>>>>>> simonmunzert/master
=======
source("packages.r")
source("functions.r")
example.obj <- "1. A small sentence. - 2. Another tiny sentence."
example.obj
str_locate(example.obj, "tiny")
str_sub(example.obj, start = 35, end = 38)
str_sub(example.obj, 35, 38) <- "huge"
str_sub(example.obj, 35, 38) <- "huge"
example.obj
str_replace(example.obj, pattern = "huge", replacement = "giant")
str_split(example.obj, "-")
str_split(example.obj, "-") %>% unlist
str_split_fixed(example.obj, "[[:blank:]]", 5) %>% as.character()
(char.vec <- c("this", "and this", "and that"))
char.vec
str_detect(char.vec, "this")
str_subset(char.vec, "this") # wrapper around x[str_detect(x, pattern)]
str_count(char.vec, "this")
str_count(char.vec, "\\w+")
str_length(char.vec)
str_dup(char.vec, 3)
length.char.vec <- str_length(char.vec)
char.vec
length.char.vec <- str_length(char.vec)
length.char.vec
char.vec <- str_pad(char.vec, width = max(length.char.vec), side = "both", pad = " ")
char.vec
str_trim(char.vec)
?str_trim
str_c("text", "manipulation", sep = " ")
str_c("text", "manipulation", sep = " ")
str_c(char.vec, collapse = "\n") %>% cat
str_c(char.vec, collapse = "\n")
str_c(char.vec, collapse = "\n") %>% cat
str_c("text", c("manipulation", "basics"), sep = " ")
agrep("Donald Trump", "Donald Drumpf", max.distance = list(all = 3))
?agrep
agrepl("Donald Trump", "Donald Drumpf", max.distance = list(all = 3))
agrep("Donald Trump", "Barack Obama", max.distance = list(all = 3))
agrepl("Donald Trump", "Barack Obama", max.distance = list(all = 3))
library(stringi)
example.obj
stri_count_words(example.obj)
stri_stats_latex(example.obj)
stri_stats_general(example.obj)
stri_escape_unicode("\u00b5")
stri_unescape_unicode("\u00b5")
stri_rand_lipsum(3)
stri_rand_shuffle("hello")
stri_rand_strings(100, 10, pattern = "[humboldt]")
browseURL("https://www.nytimes.com/")
browseURL("http://flukeout.github.io/") # let's play this together until plate 8 or so!
source("packages.r")
email <- "chunkylover53[at]aol[dot]com"
email_new <- email %>% str_replace("\\[at\\]", "@") %>% str_replace("\\[dot\\]", ".")
email_new
str_extract(email_new, "[:digit:]+")
regex <- ".*"
string <- c("1. This is an example string by", "2. Eddie (born 1961 in München)", "!§%$&/)(}")
str_extract_all(string, regex)
raw.data <- "555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert"
(name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}")))
(name_sorted <-  str_replace(name, "(.+), (.+)", "\\2 \\1"))
has_title <- str_detect(name, pattern="Dr\\. |Rev\\.")
has_title
name_elements <- str_count(name_sorted, "\\w+")
has_second_name <- ifelse(has_title == FALSE & name_elements > 2, TRUE,
ifelse(has_title == TRUE & name_elements > 3, TRUE, FALSE))
has_second_name
string <- "<title>+++BREAKING NEWS+++</title>"
str_extract(string, "<.+>")
str_extract(string, "<.+?>")
string <- "(5-3)^2=5^2-2*5*3+3^2 conforms to the binomial theorem"
regex <- "[^0-9=+*()]+"
str_extract_all(string, regex)
regex_correct <- "[[:digit:][:punct:]]+"
regex_correct_alt <- "[[:digit:]()=*-^]+"
regex_correct
str_extract_all(string, regex_correct)
str_extract_all(string, regex_correct_alt)
secret <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
(solved <- unlist(str_extract_all(secret, "[[:upper:][:punct:]]")))
str_c(solved, collapse="")
browseURL("https://www.jstatsoft.org/about/editorialTeam")
>>>>>>> simonmunzert/master
