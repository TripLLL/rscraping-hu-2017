order(vec2)
order(vec2)
vec2 <- seq(1, 5)
order(vec2)
order(vec1)
vec1[order(vec1)]
sort(vec1)
vec1[order(vec1)]
vec3 <- c(1,10,NA,7,NA,11)
vec3
vec4 <- vec3[!is.na(vec3)]
vec4
z <- c(1,2,"Bavaria", 4)
z
str(z)
zz <- c(1,2,Bavaria,4,5,6) # error
Bavaria <- 3
zz <- c(1,2,Bavaria,4,5,6)
zz
str(zz)
zz
zzchar <- as.character(zz)
zzchar
zznum <- as.numeric(zzchar)
zznum
zzchar <- "Bavaria"
zzchar
zzchar <- as.character(zz)
zzchar[3] <- "Bavaria"
zzchar
zznum <- as.numeric(zzchar)
zznum
zzchar[2] <- "Berlin"
zzchar
as.numeric(zzchar)
x
zz
xzz <- c(x,zz)
xzz
countries
countries[2]
xzz
xzz[1:6] # xzz[seq(1,6)], xzz[c(1,2,3,4,5,6)]
xzz[c(2, 5, 10)]
xzz[-1]
xzz -1
xzz[-(1, 3)]
xzz[-c(1, 3)]
Hessen
xzz[Hessen]
Hessen <- 4
xzz[Hessen]
seq(0, 10, by = 2)
xzz[seq(0, 10, by = 2)]
xzz[c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE)]
y
y[is.na(y)]
y[!is.na(y)]
y
y[y>5 | !is.na(y)]
y[y>5 | is.na(y)]
countries
countries[3] <- "Switzerland"
countries
xzz
xzz[c(1, 3, 5)] <- c(100,110,120)
xzz
xzz_new <- xzz
xzz_new
xzz_new[xzz > 100] <- 1
xzz_new
xzz_new[xzz <= 100] <- 0
xzz_new
x <- seq(0, 20, 4)
x
y <- c(3,3,3,4,4,4,4,5,5,5,5,5)
y
rep(c(3, 4, 5), each = 3)
rep(c(3, 4, 5), c(3, 4, 5))
x
y
z <- c(x[1:5], y[2:12])
z
seq(1, 100) %>% sum()
library(magrittr)
seq(1, 100) %>% sum()
sum(1:100)
101*50
seq(1, 100, 2)
seq(1, 100, 2)^2
seq(1, 100, 2)^2 %>% sum
foo_df <- as.data.frame(matrix(ncol = 6))
foo_df
names(foo_df)
names(foo_df) <- c("hIgHlo", "REPEAT VALUE", "REPEAT VALUE", "% successful (2009)",  "abc@!*", "")
foo_df
janitor::clean_names(foo_df)
make.names(names(foo_df)) # base R solution - not very convincing
c(1:5, 98, 99)
sample(c(1:5, 98, 99))
sample(c(1:5, 98, 99))
sample(c(1:5, 98, 99))
sample(c(1:5, 98, 99), 20, replace = TRUE)
sample(c(1:5, 98, 99), 20, replace = TRUE)
sample(c(1:5, 98, 99), 20, replace = TRUE)
convert_to_NA(sample(c(1:5, 98, 99), 20, replace = TRUE), c(98,99))
source("packages.r")
source("functions.r")
?convert_to_NA
convert_to_NA(sample(c(1:5, 98, 99), 20, replace = TRUE), c(98,99))
foo <- sample(c(1:5, 98, 99), 20, replace = TRUE)
foo
foo[foo == 98 | foo == 99] <- NA
foo
head(mtcars)
table(mtcars$cyl)
janitor::tabyl(mtcars$cyl, show_na = TRUE, sort = TRUE)
janitor::tabyl(mtcars$cyl, show_na = TRUE, sort = TRUE) %>% add_totals_row()
mtcars %$% table(cyl, gear)
mtcars %>% janitor::crosstab(cyl, gear)
mtcars %>% janitor::crosstab(cyl, gear) %>% adorn_crosstab(denom = "row", show_totals = TRUE)
mtcars %>% janitor::crosstab(cyl, gear) %>% adorn_crosstab(denom = "row") %>% add_totals_row()
crosstab(cyl, gear) %>% adorn_crosstab(denom = "row")
mtcars %>% janitor::crosstab(cyl, gear) %>% adorn_crosstab(denom = "row")
mtcars
sum_vector <- vector()
sum_vector
sum_vector <- numeric()
sum_vector
sum_vector <- numeric()
for(i in 1:4) {
sum_vector[i] <- mtcars[,i] %>% sum
}
sum_vector
mtcars[,1]
names(mtcars)
sum_vector <- numeric()
for(i in 1:11) {
sum_vector[i] <- mtcars[,i] %>% sum
}
sum_vector
sum_vector <- numeric()
for(i in 1:12) {
sum_vector[i] <- mtcars[,i] %>% sum
}
sum_vector
str(mtcars)
length(mtcars)
seq_along(mtcars)
ncol(mtcars)
nrow(mtcars)
sum_vector <- numeric()
for(i in 1:ncol(mtcars)) {
sum_vector[i] <- mtcars[,i] %>% sum
}
sum_vector
lapply(mtcars, is.numeric)
sum_vector <- logical()
for(i in 1:ncol(mtcars)) {
sum_vector[i] <- mtcars[,i] %>% is.numeric
}
sum_vector
foo <- lapply(mtcars, is.numeric)
foo
class(foo)
sapply(mtcars, is.numeric)
foo <- sapply(mtcars, is.numeric)
class(foo)
sapply(mtcars, is.numeric) %>% class
a <- matrix(1:20, nrow = 5)
a
apply(a, 1, mean)
apply(a, 2, mean)
apply(mtcars, 2, mean)
apply(mtcars, 1, mean)
names(mtcars)
apply(mtcars[,1:2], 1, mean)
mtcars[,1:2] %>% apply(1, mean)
apply(mtcars[,1:2], 1, mean)
names(mtcars)
apply(mtcars[,c("gear", "carb")], 1, mean)
select(mtcars, gear, carb)
select(mtcars, gear, carb) %>% apply(1, mean)
?runif
?rnorm
runif(10)
runif(10)
runif(10)
runif(10)
runif(10)
runif(10)
xs <- replicate(5, runif(10), simplify = FALSE)
xs
ws <- replicate(5, rpois(10, 5) + 1, simplify = FALSE)
ws
?weighted.mean
Map(weighted.mean, xs, ws)
Map(weighted.mean, xs, ws) %>% unlist
mtcars
mtcars$mpg
mtcars$mpg %>% class
(current_folder <- getwd())
setwd("/Users/munzerts/github/")
setwd("/Users/munzerts/github/rscraping-hu-2017")
dir.create("data")
dir.create("data/r-data")
# get all pre-compiled data sets
dat <- as.data.frame(data(package = "datasets")$results)
dat$Item %<>% str_replace(" \\(.+\\)", "")
dat
# store data sets in local folder
for (i in 1:50) {
try(df_out <- dat$Item[i] %>% as.character %>% get)
save(df_out, file = paste0("data/r-data/", dat$Item[i], ".RData"))
}
dir()
dir("data/r-data")
filenames <- dir("data/r-data", full.names = TRUE)
filenames
dir("data/r-data", pattern = "US")
dir("data/r-data", pattern = "US", ignore.case = TRUE)
?files
filenames
basename(filenames)
url <- "http://www.mzes.uni-mannheim.de/d7/en/news/media-coverage/ist-die-wahlforschung-in-der-krise-der-undurchschaubare-buerger"
url
basename(url)
dirname(url)
file_inf <- file.info(dir(recursive = F))
file_inf
tools::file_ext(filenames)
filenames
tools::file_ext(dir())
file.exists(filenames)
file.exists("voterfile.RData")
file.exists(filenames)
file.exists()
(foo <- file.choose())
source("packages.r")
library(stringr)
string1 <- "This is a string"
string1 %>% class()
double_quote <- "\"" # or '"'
double_quote
?"'"
double_quote
writeLines(double_quote) # shows raw contents of the string
cat(double_quote)
x <- "\u00b5"
x
writeLines(x)
x
double_quote
x <- c("apple", "banana", "pear")
x
?str_view
str_view(x, "an")
str_view_all(x, "an")
str_view_all(x, "a")
raw.data <- "555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert"
raw.data
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
phone <- unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
phone
str_extract_all(raw.data, "[[:alpha:]., ]{2,}")
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
example.obj <- "1. A small sentence. - 2. Another tiny sentence."
example.obj
str_extract(example.obj, "small")
str_extract(example.obj, "banana")
(out <- str_extract_all(c("text", "manipulation", "basics"), "a"))
c("text", "manipulation", "basics"), "a"
c("text", "manipulation", "basics")
(out <- str_extract_all(c("text", "manipulation", "basics"), "a"))
str_extract(example.obj, "small")
str_extract(example.obj, "SMALL")
str_extract(example.obj, ignore.case("SMALL")) # wrong
str_extract(example.obj, regex("SMALL", ignore_case = TRUE))
example.obj
str_extract(example.obj, "mall sent")
str_extract(example.obj, "^1")
str_extract(example.obj, "^2")
str_extract(example.obj, "sentence$")
str_extract(example.obj, "sentence.$")
unlist(str_extract_all(example.obj, "tiny|sentence"))
str_extract(example.obj, "sm.ll")
str_extract(example.obj, "sm[abc]ll")
str_extract(example.obj, "sm[a-p]ll")
unlist(str_extract_all(example.obj, "[uvw. ]"))
example.obj
unlist(str_extract_all(example.obj, "[:punct:]"))
?base::regex
unlist(str_extract_all(example.obj, "[[:punct:]ABC]"))
unlist(str_extract_all(example.obj, "[^[:alnum:]]"))
str_extract(example.obj, "s[[:alpha:]][[:alpha:]][[:alpha:]]l")
str_extract(example.obj, "s[[:alpha:]]{3}l")
str_extract(example.obj, "A.+sentence")
str_extract(example.obj, "A.+?sentence")
unlist(str_extract_all(example.obj, "(.en){1,5}"))
unlist(str_extract_all(example.obj, ".en{1,5}"))
unlist(str_extract_all(example.obj, "(.en){1,4}"))
unlist(str_extract_all(example.obj, "(.en){1,3}"))
unlist(str_extract_all(example.obj, "(.en)"))
unlist(str_extract_all(example.obj, "(.en){1,1}"))
unlist(str_extract_all(example.obj, "(.en){1,5}"))
unlist(str_extract_all(example.obj, "(.en){2,5}"))
unlist(str_extract_all(example.obj, "(.en){1,5}"))
unlist(str_extract_all(example.obj, "(.en){1,6}"))
unlist(str_extract_all(example.obj, "(.en){1,7}"))
unlist(str_extract_all(example.obj, "(.en){1,3}"))
example.obj
unlist(str_extract_all(example.obj, "\\."))
unlist(str_extract_all(example.obj, fixed(".")))
unlist(str_extract_all(example.obj, fixed("sentence.")))
unlist(str_extract_all(example.obj, "[12-]"))
unlist(str_extract_all(example.obj, "[1-2]"))
example.obj
str_extract(example.obj, "([[:alpha:]]).+?\\1")
str_extract(example.obj, "(\\b[a-z]+\\b).+?\\1")
unlist(str_extract_all(example.obj, "(?<=2. ).+")) # positive lookbehind: (?<=...)
unlist(str_extract_all(example.obj, ".+(?=2)")) # positive lookahead (?=...)
unlist(str_extract_all(example.obj, "(?<!Blah )tiny.+")) # negative lookbehind: (?<!...)
unlist(str_extract_all(example.obj, "sentence.+(?!Bla)")) # negative lookahead (?!...)
browseURL("http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address/201378#201378") # think again
source("packages.r")
source("functions.r")
example.obj <- "1. A small sentence. - 2. Another tiny sentence."
example.obj
str_locate(example.obj, "tiny")
str_sub(example.obj, start = 35, end = 38)
str_sub(example.obj, 35, 38) <- "huge"
str_sub(example.obj, 35, 38) <- "huge"
example.obj
str_replace(example.obj, pattern = "huge", replacement = "giant")
str_split(example.obj, "-")
str_split(example.obj, "-") %>% unlist
str_split_fixed(example.obj, "[[:blank:]]", 5) %>% as.character()
(char.vec <- c("this", "and this", "and that"))
char.vec
str_detect(char.vec, "this")
str_subset(char.vec, "this") # wrapper around x[str_detect(x, pattern)]
str_count(char.vec, "this")
str_count(char.vec, "\\w+")
str_length(char.vec)
str_dup(char.vec, 3)
length.char.vec <- str_length(char.vec)
char.vec
length.char.vec <- str_length(char.vec)
length.char.vec
char.vec <- str_pad(char.vec, width = max(length.char.vec), side = "both", pad = " ")
char.vec
str_trim(char.vec)
?str_trim
str_c("text", "manipulation", sep = " ")
str_c("text", "manipulation", sep = " ")
str_c(char.vec, collapse = "\n") %>% cat
str_c(char.vec, collapse = "\n")
str_c(char.vec, collapse = "\n") %>% cat
str_c("text", c("manipulation", "basics"), sep = " ")
agrep("Donald Trump", "Donald Drumpf", max.distance = list(all = 3))
?agrep
agrepl("Donald Trump", "Donald Drumpf", max.distance = list(all = 3))
agrep("Donald Trump", "Barack Obama", max.distance = list(all = 3))
agrepl("Donald Trump", "Barack Obama", max.distance = list(all = 3))
library(stringi)
example.obj
stri_count_words(example.obj)
stri_stats_latex(example.obj)
stri_stats_general(example.obj)
stri_escape_unicode("\u00b5")
stri_unescape_unicode("\u00b5")
stri_rand_lipsum(3)
stri_rand_shuffle("hello")
stri_rand_strings(100, 10, pattern = "[humboldt]")
browseURL("https://www.nytimes.com/")
browseURL("http://flukeout.github.io/") # let's play this together until plate 8 or so!
source("packages.r")
email <- "chunkylover53[at]aol[dot]com"
email_new <- email %>% str_replace("\\[at\\]", "@") %>% str_replace("\\[dot\\]", ".")
email_new
str_extract(email_new, "[:digit:]+")
regex <- ".*"
string <- c("1. This is an example string by", "2. Eddie (born 1961 in München)", "!§%$&/)(}")
str_extract_all(string, regex)
raw.data <- "555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert"
(name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}")))
(name_sorted <-  str_replace(name, "(.+), (.+)", "\\2 \\1"))
has_title <- str_detect(name, pattern="Dr\\. |Rev\\.")
has_title
name_elements <- str_count(name_sorted, "\\w+")
has_second_name <- ifelse(has_title == FALSE & name_elements > 2, TRUE,
ifelse(has_title == TRUE & name_elements > 3, TRUE, FALSE))
has_second_name
string <- "<title>+++BREAKING NEWS+++</title>"
str_extract(string, "<.+>")
str_extract(string, "<.+?>")
string <- "(5-3)^2=5^2-2*5*3+3^2 conforms to the binomial theorem"
regex <- "[^0-9=+*()]+"
str_extract_all(string, regex)
regex_correct <- "[[:digit:][:punct:]]+"
regex_correct_alt <- "[[:digit:]()=*-^]+"
regex_correct
str_extract_all(string, regex_correct)
str_extract_all(string, regex_correct_alt)
secret <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
(solved <- unlist(str_extract_all(secret, "[[:upper:][:punct:]]")))
str_c(solved, collapse="")
browseURL("https://www.jstatsoft.org/about/editorialTeam")
browseURL("http://www.whoishostingthis.com/tools/user-agent/")
uastring <- "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
session <- html_session("http://www.google.com", user_agent(uastring))
search <- html_form(session)[[1]]
source("packages.r")
source("functions.r")
browseURL("https://www.nytimes.com")
tempwd <- ("data/jstatsoftStats")
dir.create(tempwd)
setwd(tempwd)
# construct list of urls
baseurl <- "http://www.jstatsoft.org/article/view/v"
volurl <- paste0("0", seq(1,77,1))
volurl[1:9] <- paste0("00", seq(1, 9, 1))
brurl <- paste0("0", seq(1,9,1))
urls_list <- paste0(baseurl, volurl)
urls_list <- paste0(rep(urls_list, each = 9), "i", brurl)
names <- paste0(rep(volurl, each = 9), "_", brurl, ".html")
# download pages
folder <- "html_articles/"
dir.create(folder)
for (i in 1:length(urls_list)) {
if (!file.exists(paste0(folder, names[i]))) {
download.file(urls_list[i], destfile = paste0(folder, names[i])) # , method = "libcurl" might be needed on windows machine
Sys.sleep(runif(1, 0, 1))
}
}
browseURL("http://www.jstatsoft.org/")
volurl <- paste0("0", seq(1,78,1))
volurl
volurl[1:9] <- paste0("00", seq(1, 9, 1))
volurl
brurl <- paste0("0", seq(1,9,1))
brul
brurl
urls_list <- paste0(baseurl, volurl)
urls_list
urls_list <- paste0(rep(urls_list, each = 9), "i", brurl)
urls_list
names <- paste0(rep(volurl, each = 9), "_", brurl, ".html")
names
list_files <- list.files(folder, pattern = "0.*")
list_files
# download pages
folder <- "html_articles/"
dir.create(folder)
for (i in 1:length(urls_list)) {
if (!file.exists(paste0(folder, names[i]))) {
download.file(urls_list[i], destfile = paste0(folder, names[i])) # , method = "libcurl" might be needed on windows machine
Sys.sleep(runif(1, 0, 1))
}
}
list_files <- list.files(folder, pattern = "0.*")
list_files_path <-  list.files(folder, pattern = "0.*", full.names = TRUE)
length(list_files)
files_size <- sapply(list_files_path, file.size)
table(files_size) %>% sort()
hist(files_size)
files_size
hist(files_size)
sort(files_size)
# delete non-existing articles
files_size <- sapply(list_files_path, file.size)
table(files_size) %>% sort()
delete_files <- list_files_path[files_size == 23460]
sapply(delete_files, file.remove)
list_files_path <-  list.files(folder, pattern = "0.*", full.names = TRUE) # update list of files
# import pages and extract content
authors <- character()
title <- character()
statistics <- character()
numViews <- numeric()
datePublish <- character()
for (i in 1:length(list_files_path)) {
html_out <- read_html(list_files_path[i])
table_out <- html_table(html_out, fill = TRUE)[[6]]
authors[i] <- table_out[1,2]
title[i] <- table_out[2,2]
statistics[i] <- table_out[4,2]
numViews[i] <- statistics[i] %>% str_extract("[[:digit:]]+") %>% as.numeric()
datePublish[i] <- statistics[i] %>% str_extract("[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}.$") %>% str_replace("\\.", "")
}
dat <- data.frame(authors = authors, title = title, numViews = numViews, datePublish = datePublish)
View(dat)
dattop <- dat[order(dat$numViews, decreasing = TRUE),]
dattop[1:10,]
summary(dat$numViews)
plot(density(dat$numViews, from = 0), yaxt="n", ylab="", xlab="Number of views", main="Distribution of article page views in JSTATSOFT")
browseURL("http://www.whoishostingthis.com/tools/user-agent/")
session <- html_session("http://www.google.com", user_agent(uastring))
uastring <- "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
session <- html_session("http://www.google.com", user_agent(uastring))
search <- html_form(session)[[1]]
search
form <- set_values(search, q = "pubs firenze")
form
google_search <- submit_form(session, form)
url_parsed <- read_html(google_search)
hits_text <- html_nodes(url_parsed, css = ".r a") %>% html_text()
hits_links <- html_nodes(url_parsed, css = ".r a") %>% html_attr("href")
hits_text
hits_links
